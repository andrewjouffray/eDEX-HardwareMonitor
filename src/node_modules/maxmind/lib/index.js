"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Reader = exports.validate = exports.init = exports.openSync = exports.open = void 0;
const assert_1 = __importDefault(require("assert"));
const tiny_lru_1 = __importDefault(require("tiny-lru"));
const mmdb_lib_1 = __importDefault(require("mmdb-lib"));
exports.Reader = mmdb_lib_1.default;
const fs_1 = __importDefault(require("./fs"));
const ip_1 = __importDefault(require("./ip"));
const is_gzip_1 = __importDefault(require("./is-gzip"));
const utils_1 = __importDefault(require("./utils"));
exports.open = async (filepath, opts, cb) => {
    assert_1.default(!cb, utils_1.default.legacyErrorMessage);
    const database = await fs_1.default.readFile(filepath);
    if (is_gzip_1.default(database)) {
        throw new Error('Looks like you are passing in a file in gzip format, please use mmdb database instead.');
    }
    const cache = tiny_lru_1.default((opts && opts.cache && opts.cache.max) || 6000);
    let reader = new mmdb_lib_1.default(database, { cache });
    if (opts && !!opts.watchForUpdates) {
        if (opts.watchForUpdatesHook &&
            typeof opts.watchForUpdatesHook !== 'function') {
            throw new Error('opts.watchForUpdatesHook should be a function');
        }
        const watcherOptions = {
            persistent: opts.watchForUpdatesNonPersistent !== true,
        };
        fs_1.default.watchFile(filepath, watcherOptions, async () => {
            const waitExists = async () => {
                for (let i = 0; i < 3; i++) {
                    if (fs_1.default.existsSync(filepath)) {
                        return true;
                    }
                    await new Promise(a => setTimeout(a, 500));
                }
                return false;
            };
            if (!(await waitExists())) {
                return;
            }
            const updateDatabase = await fs_1.default.readFile(filepath);
            cache.clear();
            reader = new mmdb_lib_1.default(updateDatabase, { cache });
            if (opts.watchForUpdatesHook) {
                opts.watchForUpdatesHook();
            }
        });
    }
    return reader;
};
exports.openSync = () => {
    throw new Error(utils_1.default.legacyErrorMessage);
};
exports.init = () => {
    throw new Error(utils_1.default.legacyErrorMessage);
};
exports.validate = ip_1.default.validate;
__exportStar(require("mmdb-lib"), exports);
exports.default = {
    init: exports.init,
    open: exports.open,
    openSync: exports.openSync,
    validate: ip_1.default.validate,
};
//# sourceMappingURL=index.js.map