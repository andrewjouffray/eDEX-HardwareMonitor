"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = __importDefault(require("../utils"));
const readNodeRight24 = (db) => (offset) => utils_1.default.concat3(db[offset + 3], db[offset + 4], db[offset + 5]);
const readNodeLeft24 = (db) => (offset) => utils_1.default.concat3(db[offset], db[offset + 1], db[offset + 2]);
const readNodeLeft28 = (db) => (offset) => utils_1.default.concat4(db[offset + 3] >> 4, db[offset], db[offset + 1], db[offset + 2]);
const readNodeRight28 = (db) => (offset) => utils_1.default.concat4(db[offset + 3] & 0x0f, db[offset + 4], db[offset + 5], db[offset + 6]);
const readNodeLeft32 = (db) => (offset) => db.readUInt32BE(offset, true);
const readNodeRight32 = (db) => (offset) => db.readUInt32BE(offset + 4, true);
exports.default = (db, recordSize) => {
    switch (recordSize) {
        case 24:
            return { left: readNodeLeft24(db), right: readNodeRight24(db) };
        case 28:
            return { left: readNodeLeft28(db), right: readNodeRight28(db) };
        case 32:
            return { left: readNodeLeft32(db), right: readNodeRight32(db) };
    }
    throw new Error('Unsupported record size');
};
//# sourceMappingURL=walker.js.map